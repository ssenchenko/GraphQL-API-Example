Transform: AWS::Serverless-2016-10-31

Description: "Sample GraphQlApi"

Parameters:
  APIName:
    Type: String
    Description: "Name of the API, for generate names for resources"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    Default: MyNotes

Resources:
# ============== Non AppSync resources ==============
  DynamoDBNotesTable:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for AWS AppSync Notes Type"
    Properties:
      TableName: !Sub ${APIName}-notes-table
      AttributeDefinitions:
        - AttributeName: "NoteId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "NoteId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  HelloLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/hello-world/
      Handler: main
      Runtime: go1.x

  ClientRead:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/client-read/
      Handler: main
      Runtime: go1.x
      Environment:
        Variables:
          API_KEY: !GetAtt  ApiKey.ApiKey
          GRAPHQL_URL: !GetAtt AppSyncApi.GraphQLUrl

  ClientReadJS:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/client-js
      Runtime: nodejs18.x
      Handler: index.handler
      Environment:
        Variables:
          API_KEY: !GetAtt  ApiKey.ApiKey
          GRAPHQL_URL: !GetAtt AppSyncApi.GraphQLUrl

# ================= Connectors between AppSync and Other Resources =================
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: appsync-dynamodb-role
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com
    DependsOn:
      - AppSyncDynamoDBPolicy

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS AppSync to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join [ "", [ !GetAtt DynamoDBNotesTable.Arn, "*" ] ]

  AppSyncApiLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allow-access-to-lambda-from-appsync
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource:
                  - !GetAtt HelloLambda.Arn
                  - !Join ["", [!GetAtt HelloLambda.Arn, ":*"]]

# ================= AppSync Resources =================
  AppSyncApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the Notes App"
    Properties:
      AuthenticationType: API_KEY
      Name: !Sub ${APIName}
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
      # LogConfig:
      #   CloudWatchLogsRoleArn: String
      #   ExcludeVerboseContent: false
      #   FieldLogLevel: ALL

  AppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "s3://graph-ql-demo/schema-v1_1.graphql"

  ApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
     ApiId: !GetAtt AppSyncApi.ApiId

  AppSyncNotesTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: !Sub ${APIName}_notes_table
      Description: "The Notes Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBNotesTable
        AwsRegion: !Sub ${AWS::Region}

  AppSyncLambdaDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: "AppSyncLambdaDataSource"
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncApiLambdaInvocationRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt HelloLambda.Arn

  AppSyncAllMyNotesQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: allMyNotes
      DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
      RequestMappingTemplateS3Location: "s3://graph-ql-demo/resolvers/allMyNotes.request.vtl"
      ResponseMappingTemplateS3Location: "s3://graph-ql-demo/resolvers/allMyNotes.response.vtl"

  AppSyncGetNoteQueryResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getNote
      DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "NoteId": $util.dynamodb.toDynamoDBJson($context.arguments.NoteId)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  AppSyncSaveNoteMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: saveNote
      DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "NoteId": $util.dynamodb.toDynamoDBJson($context.arguments.NoteId)
          },
          "attributeValues": {
            "title": $util.dynamodb.toDynamoDBJson($context.arguments.title),
            "content": $util.dynamodb.toDynamoDBJson($context.arguments.content)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  AppSyncDeleteNoteMutationResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteNote
      DataSourceName: !GetAtt AppSyncNotesTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "NoteId": $util.dynamodb.toDynamoDBJson($context.args.NoteId)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  SayHelloResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: "Query"
      FieldName: "sayHello"
      DataSourceName: !GetAtt AppSyncLambdaDataSource.Name

  

Outputs:
  NotesTableName:
    Value: !Ref DynamoDBNotesTable
  GraphQLApiEndpoint:
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Value: !GetAtt AppSyncApi.ApiId
  GraphQLKey:
    Value: !GetAtt ApiKey.ApiKey
